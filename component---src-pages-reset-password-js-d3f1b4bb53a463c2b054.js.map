{"version":3,"sources":["webpack:///./src/pages/ResetPassword.js"],"names":["ResetPassword","passwordRef","useRef","useState","error","setError","message","setMessage","loading","setLoading","email","setEmail","validURL","setValidURL","a","window","searchParams","URLSearchParams","location","search","actionCode","get","handleResetPassword","current","value","ret","undefined","String","useEffect","mode","verifyResetLink","run","title","className","style","maxWidth","borderColor","borderWidth","Body","fontWeight","backgroundColor","color","onSubmit","e","preventDefault","callReset","Group","id","Label","Control","type","ref","required","disabled","to"],"mappings":"2oBAQe,SAASA,IAEtB,IAAMC,EAAcC,mBADtB,EAE4BC,mBAAS,IAA5BC,EAFT,KAEgBC,EAFhB,OAGgCF,mBAAS,IAAhCG,EAHT,KAGkBC,EAHlB,OAIgCJ,oBAAS,GAAhCK,EAJT,KAIkBC,EAJlB,OAM4BN,mBAAS,IAA5BO,EANT,KAMgBC,EANhB,OAOkCR,oBAAS,GAAlCS,EAPT,KAOmBC,EAPnB,uCAwDE,gCAAAC,EAAA,4DAGwB,oBAAXC,SACTC,EAAe,IAAIC,gBAAgBF,OAAOG,SAASC,SAGlDH,IACDI,EAAaJ,EAAaK,IAAI,YARlC,SASkBC,YAAoBF,EAAWV,EAAMT,EAAYsB,QAAQC,OAT3E,QASMC,EATN,QAawBC,MAAhBD,EAAG,MAELlB,EAAW,sEAEYmB,MAAhBD,EAAG,OAEVpB,EAASsB,OAAOF,EAAG,QAKrBpB,EAAS,0BAxBb,4CAxDF,sBAqGE,OA5FAuB,qBAAW,WACX,kCACE,kCAAAd,EAAA,yDAGwB,oBAAXC,SACTC,EAAe,IAAIC,gBAAgBF,OAAOG,SAASC,SAIlDH,IAEDI,EAAaJ,EAAaK,IAAI,WAC9BQ,EAAOb,EAAaK,IAAI,SAIf,iBAARQ,EAfL,gCAiBoBC,YAAgBV,GAjBpC,QAiBQK,EAjBR,QAqB0BC,MAAhBD,EAAG,OAELZ,GAAY,GACZF,EAAUgB,OAAOF,IACjBpB,EAAS,KAEcqB,MAAhBD,EAAG,OAEVpB,EAASsB,OAAOF,EAAG,QAKrBpB,EAAS,2CAlCf,uBAuCIA,EAAS,iDAvCb,6CADF,uBAAC,WAAD,wBA2CE0B,KACA,IAgDA,oCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAM,oBACX,kBAAC,IAAD,CAAWC,UAAU,oDACnB,yBAAKA,UAAU,mBAAmBC,MAAO,CAAEC,SAAU,UACnD,kBAAC,IAAD,CAAMD,MAAO,CAAEE,YAAY,OAAOC,YAAY,QAC5C,kBAAC,IAAKC,KAAN,KAEE,wBAAIL,UAAU,oBAAd,kBACC7B,GAAS,kBAAC,IAAD,CAAO8B,MAAO,CAACK,WAAW,MAAMC,gBAAgB,UAAUC,MAAM,QAAQL,YAAY,YAAahC,GAC1GE,GAAW,kBAAC,IAAD,CAAO4B,MAAO,CAACK,WAAW,MAAMC,gBAAgB,UAAUC,MAAM,QAAQL,YAAY,YAAa9B,GAE5GM,GACC,kBAAC,IAAD,CAAM8B,SA/BtB,SAAsBC,GAEpBA,EAAEC,iBACF,IAEErC,EAAW,IACXF,EAAS,IACTI,GAAW,GA3FjB,mCA4FMoC,GAEF,SAEExC,EAAS,4BAEXI,GAAW,KAkBMC,GAAS,yCAAeA,EAAf,IAAsB,6BAAK,6BAA3B,KACV,kBAAC,IAAKoC,MAAN,CAAYC,GAAG,YACb,kBAAC,IAAKC,MAAN,qBACA,kBAAC,IAAKC,QAAN,CAAcC,KAAK,WAAWC,IAAKlD,EAAamD,UAAQ,KAE1D,kBAAC,IAAD,CAAQC,SAAU7C,EAASyB,UAAU,QAAQiB,KAAK,UAAlD,mBAKJ,yBAAKjB,UAAU,0BACb,kBAAC,OAAD,CAAMqB,GAAG,UAAT,YAMN,yBAAKrB,UAAU,0BAAf,oBACmB,kBAAC,OAAD,CAAMqB,GAAG,WAAT","file":"component---src-pages-reset-password-js-d3f1b4bb53a463c2b054.js","sourcesContent":["\r\nimport React, { useRef, useState, useEffect } from \"react\"\r\nimport { Form, Button, Card, Alert, Container } from \"react-bootstrap\"\r\nimport { loggedUser,handleResetPassword,verifyResetLink} from  \"../components/FirebaseAuth\"\r\nimport { Link } from \"gatsby\"\r\nimport { PageLayout } from \"../components\"\r\nimport { SEO } from \"../utils\"\r\n\r\nexport default function ResetPassword() \r\n{\r\n  const passwordRef = useRef()\r\n  const [error, setError] = useState(\"\")\r\n  const [message, setMessage] = useState(\"\")\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  const [email, setEmail] = useState(\"\")\r\n  const [validURL, setValidURL] = useState(false)\r\n\r\n  useEffect( () => \r\n  {\r\n    async function run()\r\n    {\r\n      let searchParams\r\n      if (typeof window !== 'undefined') \r\n      { searchParams = new URLSearchParams(window.location.search); }\r\n\r\n      let actionCode \r\n      let mode \r\n      if(searchParams)\r\n      {\r\n        actionCode = searchParams.get('oobCode')\r\n        mode = searchParams.get('mode')\r\n      }\r\n      //console.log(mode,actionCode)\r\n\r\n      if(mode == \"resetPassword\")\r\n      {\r\n        let ret = await verifyResetLink(actionCode)\r\n        //console.log(\"ret code is\",ret)\r\n        if( ret )\r\n        { \r\n          if( ret[\"error\"] == undefined)\r\n          {\r\n            setValidURL(true)\r\n            setEmail( String(ret) )\r\n            setError(\"\")\r\n          }\r\n          else if (ret[\"error\"] != undefined)\r\n          {\r\n            setError(String(ret[\"error\"]))\r\n          }\r\n        }\r\n        else\r\n        {\r\n          setError(\"Invalid URL. That URL may have expired.\")\r\n        }\r\n      }\r\n      else\r\n      {\r\n        setError(\"Invalid URL. Please refresh with a valid URL.\")\r\n      }\r\n    }\r\n    run()  \r\n  },[])\r\n\r\n  async function callReset()\r\n  {\r\n    let searchParams\r\n    if (typeof window !== 'undefined') \r\n    { searchParams = new URLSearchParams(window.location.search); }\r\n\r\n    let actionCode\r\n    if(searchParams)\r\n    { actionCode = searchParams.get('oobCode') }\r\n    let ret = await handleResetPassword(actionCode,email,passwordRef.current.value)\r\n\r\n    if(ret)\r\n    {\r\n      if( ret[\"error\"] == undefined)\r\n      {\r\n        setMessage(\"You have successfully reset your password and have been logged in!\")\r\n      }\r\n      else if (ret[\"error\"] != undefined)\r\n      {\r\n        setError(String(ret[\"error\"]))\r\n      }\r\n    }\r\n    else\r\n    {\r\n      setError(\"Password reset failed.\")\r\n    }\r\n  }\r\n\r\n  function handleSubmit(e) \r\n  {\r\n    e.preventDefault()\r\n    try \r\n    {\r\n      setMessage(\"\")\r\n      setError(\"\")\r\n      setLoading(true)\r\n      callReset()\r\n    } \r\n    catch \r\n    {\r\n      setError(\"Failed to reset password\")\r\n    }\r\n    setLoading(false)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PageLayout>\r\n        <SEO title=\"Forget Password\" />\r\n        <Container className=\"d-flex align-items-center justify-content-center\" >\r\n          <div className=\"w-100 text-color\" style={{ maxWidth: \"400px\" }}>\r\n            <Card style={{ borderColor:\"grey\",borderWidth:\"3px\" }}>\r\n              <Card.Body>\r\n\r\n                <h2 className=\"text-center mb-4\">Password Reset</h2>\r\n                {error && <Alert style={{fontWeight:\"900\",backgroundColor:\"#d9534f\",color:\"white\",borderColor:\"#d9534f\"}}>{error}</Alert>}\r\n                {message && <Alert style={{fontWeight:\"900\",backgroundColor:\"#5cb85c\",color:\"white\",borderColor:\"#5cb85c\"}}>{message}</Alert>}\r\n\r\n                {validURL &&\r\n                  <Form onSubmit={handleSubmit}>\r\n                    {email && <div> Welcome {email} <br/><br/> </div>}\r\n                    <Form.Group id=\"password\">\r\n                      <Form.Label>New Password</Form.Label>\r\n                      <Form.Control type=\"password\" ref={passwordRef} required />\r\n                    </Form.Group>\r\n                    <Button disabled={loading} className=\"w-100\" type=\"submit\">\r\n                      Reset Password\r\n                    </Button>\r\n                  </Form>\r\n                }\r\n                <div className=\"w-100 text-center mt-3\">\r\n                  <Link to=\"/Login\">Login</Link>\r\n                </div>\r\n                \r\n              </Card.Body>\r\n            </Card>\r\n\r\n            <div className=\"w-100 text-center mt-2\">\r\n              Need an account? <Link to=\"/Signup\">Sign Up</Link>\r\n            </div>\r\n          </div>\r\n        </Container>\r\n      </PageLayout>\r\n    </>\r\n  )\r\n}"],"sourceRoot":""}