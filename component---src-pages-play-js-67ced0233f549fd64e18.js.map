{"version":3,"sources":["webpack:///./node_modules/warning/warning.js","webpack:///./src/pages/play.js"],"names":["warning","module","exports","GetHouseData","localUserData","a","loggedUser","window","searchParams","URLSearchParams","location","search","stateChosen","get","mlsChosen","altReturn","userData","keyName","ret","console","log","firebase","firestore","collection","doc","String","then","exists","data","catch","error","currentUser","useState","setUserData","mlsID","setmlsID","alreadyPlayed","setAlreadyPlayed","previousScore","setPreviousScore","houseData","setHouse","pics","setPictures","category","text","feats","setFeats","assessment","total","year","taxAss","setTaxAss","readTax","setReadTax","taxModalShow","setTaxModalShow","trendModalShow","setTrendModalShow","median","trend","setTrend","readTrend","setReadTrend","listItems","setListItems","listName","setListName","priceSub","setPriceSub","priceComma","setPriceComma","hideInput","setHideInput","ogGuess","setOgGuess","priceDiff","setPriceDiff","percentageScore","setPercentageScore","modalShow","setModalShow","dark","useContext","ThemeContext","rerendering","setRerender","mapModalShow","setMapModalShow","houseSize","houseUnits","housePrice","houseCity","houseState","houseLine","houseZip","houseLat","houseLon","houseYear","loadPageData","pageData","tempPic","photos","forEach","element","str","href","better","substring","length","concat","push","src","features","tax_history","propData","by_prop_type","useEffect","userStorage","JSON","parse","localStorage","getItem","uid","setItem","stringify","listID","tempList","List","Name","state","pageInfo","getHouse","undefined","played","price","building_size","size","units","address","city","line","postal_code","lat","lon","year_built","e2","m","r","Math","PI","d1","sin","d2","cos","sqrt","SubmitPrice","evt","preventDefault","percent","abs","pointsEarned","round","pow","userID","previousData","thumbNail","trim","betterThumbNail","accuracy","toFixed","badgeKey","completed","parseInt","baths","beds","set","num","random","setTimeout","LoadWithState","LoadStateHouse","LoadWithRandom","LoadRandomHouse","Comma","Num","x","replace","split","x1","x2","rgx","test","NewScoreModal","props","aria-labelledby","centered","className","Header","style","backgroundColor","color","Title","id","fontWeight","onClick","onHide","variant","Body","sec","taxRead","trendRead","original","askLogIn","pBar","striped","bordered","hover","width","fontSize","height","now","to","learnMore","textAlign","Footer","textShadow","TaxModal","TrendModal","margin","Object","entries","map","item","ind","listing_price","key","txt","charAt","toUpperCase","substr","toLowerCase","toTitleCase","parceInp","BigMap","useCallback","center","zoom","setmap","flyTo","attributionControl","zoomControl","whenCreated","scrollWheelZoom","url","pathOptions","radius","SmallMap","MapModal","parseFloat","rel","integrity","crossorigin","title","f","index","mlsParam","stateParam","listIDHash","points","params","divider","t","k","alt","maxWidth","maxHeight","border","borderRadius","e","val","target","value","valClean","Text","borderColor","type","onChange","onKeyPress","placeholder","show","images","transitionDurationMax","hasMediaButton","hasIndexBoard","borderTop","position","opacity","bottom","zIndex","stroke","fill","preserveAspectRatio","role","viewBox","xmlns","d","description","Item","eventKey","borderWidth","Button"],"mappings":"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","file":"component---src-pages-play-js-67ced0233f549fd64e18.js","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar warning = function warning() {};\n\nif (__DEV__) {\n  var printWarning = function printWarning(format, args) {\n    var len = arguments.length;\n    args = new Array(len > 1 ? len - 1 : 0);\n\n    for (var key = 1; key < len; key++) {\n      args[key - 1] = arguments[key];\n    }\n\n    var argIndex = 0;\n    var message = 'Warning: ' + format.replace(/%s/g, function () {\n      return args[argIndex++];\n    });\n\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n\n  warning = function warning(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n\n    if (format === undefined) {\n      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n\n    if (!condition) {\n      printWarning.apply(null, [format].concat(args));\n    }\n  };\n}\n\nmodule.exports = warning;","import React, {useState, useContext, useEffect, memo, useCallback } from \"react\"\r\nimport ThemeContext from \"../utils/theme\"\r\nimport { PageLayout } from \"../components\"\r\nimport { SEO } from \"../utils\"\r\nimport { Container, Image, InputGroup, FormControl, Form, Button, Modal, CloseButton, ProgressBar, OverlayTrigger, Popover, Table} from \"react-bootstrap\"\r\nimport { Accordion } from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport firebase from \"../components/firebase\"\r\n\r\nimport { MapContainer, TileLayer, Marker, Popup, Circle,useMap } from 'react-leaflet'\r\n\r\nimport { UserData }  from  \"../components/UserData\"\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport 'bootstrap/dist/css/bootstrap.css'; // or include from a CDN\r\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\r\nimport RangeSlider from 'react-bootstrap-range-slider';\r\n\r\nimport Carousel from 'react-gallery-carousel';\r\nimport 'react-gallery-carousel/dist/index.css';\r\nimport './grid.css';\r\n\r\n\r\nimport { loggedUser, printing } from  \"../components/FirebaseAuth\"\r\nimport { LoadStateHouse, LoadRandomHouse } from  \"../components/LoadStateHouse\"\r\nimport { Link } from \"@reach/router\"\r\n\r\n\r\nconst GetHouseData = async(localUserData) =>\r\n{\r\n  //console.log(\"------- CALLED GET HOUSE DATA\")\r\n  let currentUser = loggedUser()\r\n\r\n  let searchParams\r\n  if (typeof window !== 'undefined') \r\n  { searchParams = new URLSearchParams(window.location.search); }\r\n\r\n  let stateChosen\r\n  let mlsChosen\r\n  if (searchParams)\r\n  {\r\n    stateChosen = searchParams.get('state')\r\n    mlsChosen = searchParams.get('mls')\r\n    //console.log(stateChosen,mlsChosen)\r\n  }\r\n  let played = false\r\n  let altReturn ={}\r\n\r\n  /*if (currentUser && currentUser.uid)\r\n  {\r\n    console.log(\"RUNNING Users FIREBASE CALL\")\r\n    await firebase.firestore().collection('Users').doc(currentUser.uid).get()\r\n    .then((doc) => {\r\n      if (doc.exists) \r\n      {\r\n          //console.log(\"Document data:\", doc.data());\r\n          //doc.data()\r\n          let userData = doc.data()\r\n          let keyName = `${mlsChosen}_${stateChosen}`\r\n\r\n          if (userData[keyName])\r\n          {\r\n            //console.log(\"has already played this map\")\r\n            //played = true\r\n            let ret = {\"played\":true, \"points\":userData[keyName][0]}\r\n            //console.log(\"return\",ret)\r\n            altReturn = ret\r\n          }\r\n\r\n      } \r\n      else \r\n      {\r\n          // doc.data() will be undefined in this case\r\n          console.log(\"No such user!\");\r\n      }\r\n    }).catch((error) => {\r\n        console.log(\"Error getting user:\", error);\r\n    });\r\n  }\r\n  */\r\n\r\n\r\n  if (localUserData != null)\r\n  {\r\n    //console.log(\"User data:\", localUserData);\r\n    let userData = localUserData\r\n    let keyName = `${mlsChosen}_${stateChosen}`\r\n\r\n    if (userData[keyName])\r\n    {\r\n      //console.log(\"has already played this map\")\r\n      //played = true\r\n      let ret = {\"played\":true, \"points\":userData[keyName][0]}\r\n      //console.log(\"return\",ret)\r\n      altReturn = ret\r\n    }\r\n  }\r\n  else\r\n  {\r\n    console.log(\"user DATA is null\")\r\n  }\r\n\r\n  \r\n  //console.log(\"RUNNING States FIREBASE CALL\")\r\n  return firebase.firestore().collection('States').doc(String(stateChosen)).collection('buffer').doc(mlsChosen).get()\r\n  .then((doc) => {\r\n    if (doc.exists) \r\n    {\r\n        //console.log(\"Document data:\", doc.data());\r\n        altReturn[\"house\"] = doc.data()\r\n        return altReturn\r\n    } \r\n    else \r\n    {\r\n        // doc.data() will be undefined in this case\r\n        console.log(\"No such document!\");\r\n    }\r\n  }).catch((error) => {\r\n      console.log(\"Error getting document:\", error);\r\n  });\r\n}\r\n\r\nlet first = 0\r\n\r\nexport default ({location}) => {\r\n\r\n  let currentUser = loggedUser()\r\n\r\n  //let userData = UserData()\r\n  const [userData, setUserData] = useState({})\r\n\r\n  const[mlsID,setmlsID] = useState(\"\")\r\n\r\n  const [alreadyPlayed,setAlreadyPlayed] = useState();\r\n  const [firstPageLoad, setFirst] = useState(0)\r\n  const [previousScore,setPreviousScore] = useState(0);\r\n  const [houseData,setHouse] = useState({});\r\n  const [pics, setPictures] = useState([]);\r\n  const [feats, setFeats] = useState([{category:\"filler\",text:[\"filler\", \"filler\"]}]);\r\n  \r\n  const [taxAss, setTaxAss] = useState([{assessment:{total:\"filler\"},year:\"filler\"}]);\r\n  const [readTax, setReadTax] = useState(false)\r\n  const [taxModalShow, setTaxModalShow] = useState(false);\r\n\r\n  const [trendModalShow, setTrendModalShow] = useState(false);\r\n  const [trend, setTrend] = useState({median:\"filler\"});\r\n  const [readTrend, setReadTrend] = useState(false)\r\n\r\n  const [listItems, setListItems] = useState(null)\r\n  const [listName, setListName] = useState(\"\")\r\n\r\n  const [ scoreSlider, setScoreSlider ] = useState(0); \r\n\r\n  \r\n  const [priceSub, setPriceSub] = useState(0);\r\n  const [priceComma, setPriceComma] = useState();\r\n  const [hideInput, setHideInput] = useState(false);\r\n\r\n  const [ogGuess, setOgGuess] = useState(0);\r\n  const [priceDiff, setPriceDiff] = useState(0);\r\n  const [percentageScore, setPercentageScore] = useState(0);\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const { dark } = useContext(ThemeContext)\r\n  \r\n\r\n  const [rerendering, setRerender] = useState(0.0)\r\n\r\n  const [latLongPoint, setLatLongPoint] = useState([0.0, 0.0])\r\n  const [mapModalShow, setMapModalShow] = useState(false);\r\n\r\n  let houseSize = 0\r\n  let houseUnits = \"\"\r\n  let housePrice = 0\r\n  let houseCity = \"\"\r\n  let houseState = \"\"\r\n  let houseLine = \"\"\r\n  let houseZip = \"\"\r\n  let houseLat = 0\r\n  let houseLon = 0\r\n  let houseYear = 0\r\n\r\n  const loadPageData = (pageData) =>\r\n  {\r\n    setAlreadyPlayed(false)\r\n    setHouse(pageData)\r\n    let tempPic = []\r\n    pageData.photos.forEach(element => {\r\n      let str = element.href\r\n      let trim = str.substring(0, (str.length-5))\r\n      let better = trim.concat(\"od-w1024_h768_x2.webp\")\r\n      tempPic.push({src:better})\r\n    });\r\n\r\n    setFeats(pageData.features)\r\n    setTaxAss(pageData.tax_history)\r\n    setPictures(tempPic)\r\n\r\n    \r\n    if(pageData.trend && pageData.trend.median)\r\n    {\r\n      let propData = pageData.trend.median.by_prop_type\r\n      //console.log(\"trend Data\",propData)\r\n      setTrend(propData)\r\n    }\r\n    else\r\n    {\r\n      let propData = {median:'none'}\r\n      setTrend(propData)\r\n    }\r\n\r\n    //console.log(\"pic Data is \",tempPic)\r\n    //houseData = getHouse\r\n    //console.log(\"house Data is \",pageData)\r\n  }\r\n\r\n  //let houseData = {}\r\n  //console.log(\"information is \",location)\r\n  useEffect(() => \r\n  {\r\n    \r\n    (async () =>\r\n    { \r\n      houseLat = 0\r\n      houseLon = 0\r\n      let userStorage = JSON.parse(localStorage.getItem('userData'))\r\n      if (userStorage == null)\r\n      {\r\n        if(currentUser && currentUser.uid)\r\n        {\r\n          //console.log(\"RUNNING Users FIREBASE CALL\")\r\n          await firebase.firestore().collection('Users').doc(String(currentUser.uid)).get()\r\n          .then((doc) => {\r\n            if (doc.exists) \r\n            {\r\n                //console.log(\"Document data:\", doc.data());\r\n                //doc.data()\r\n                setUserData(doc.data())\r\n                localStorage.setItem('userData', JSON.stringify(doc.data()) )\r\n            } \r\n            else \r\n            {\r\n                // doc.data() will be undefined in this case\r\n                console.log(\"No such user!\");\r\n            }\r\n          }).catch((error) => {\r\n              console.log(\"Error getting user:\", error);\r\n          });\r\n        }\r\n      }\r\n      else \r\n      {\r\n        setUserData(userStorage)\r\n        //console.log(\"didnt run firebase call because data is in local storage\", userStorage)\r\n      }\r\n\r\n\r\n      \r\n\r\n      let searchParams\r\n      if (typeof window !== 'undefined') \r\n      { searchParams = new URLSearchParams(window.location.search); }\r\n\r\n      let listID\r\n      if(searchParams)\r\n      { listID = searchParams.get('listID') }\r\n      \r\n      //console.log(\"list id is\",listID)\r\n      if(listID)\r\n      {\r\n        //console.log(\"RUNNING CATEGORIES FIREBASE CALL\")\r\n        await firebase.firestore().collection('Categories').doc(String(listID)).get()\r\n        .then((doc) => {\r\n          if (doc.exists) \r\n          {\r\n            let tempList = doc.data().List\r\n            //tempList[\"listID\"]=listID\r\n            //console.log(\"Document DDDDDDDdata:\", tempList);\r\n            setListItems(tempList)\r\n            setListName(doc.data().Name)\r\n          } \r\n          else \r\n          {\r\n            // doc.data() will be undefined in this case\r\n            console.log(\"No such item!\");\r\n          }\r\n        }).catch((error) => {\r\n            console.log(\"Error getting items:\", error);\r\n        });\r\n      }\r\n      else \r\n      {\r\n        setListItems(null)\r\n      }\r\n\r\n\r\n      if(location && location.state && location.state.pageInfo) //data sent from previous page\r\n      {\r\n        //console.log(\"------- USED INFO FROM PREVIOUS PAGE\")\r\n        loadPageData(location.state.pageInfo)\r\n\r\n        let getHouse\r\n        if (userStorage != null)\r\n        {  \r\n          getHouse = await GetHouseData(userStorage) \r\n          //console.log(\"ran with userStorage\")\r\n        }\r\n        else\r\n        { \r\n          getHouse = await GetHouseData(userData)  \r\n          //console.log(\"ran with userdata\")\r\n        }\r\n\r\n        if(getHouse && getHouse.played != undefined)\r\n        {\r\n          setPreviousScore(getHouse[\"points\"])\r\n          setAlreadyPlayed(true)\r\n        }\r\n        //location = undefined\r\n      }\r\n      else //page was navigated via diret link\r\n      {\r\n        //console.log(\"there was no houseinfo\")\r\n        let getHouse\r\n        if (userStorage != null)\r\n        {  \r\n          getHouse = await GetHouseData(userStorage) \r\n          //console.log(\"ran with userStorage\",userStorage)\r\n        }\r\n        else\r\n        { \r\n          getHouse = await GetHouseData(userData)  \r\n          //console.log(\"ran with userdata\",userData)\r\n        }\r\n        if(getHouse[\"played\"] == undefined)\r\n        {\r\n          loadPageData(getHouse[\"house\"])\r\n        }\r\n        else\r\n        {\r\n          loadPageData(getHouse[\"house\"])\r\n          setPreviousScore(getHouse[\"points\"])\r\n          setAlreadyPlayed(true)\r\n        }\r\n      }\r\n\r\n    })()\r\n  }, [mlsID, rerendering])\r\n  let photoWidth = '600';\r\n  let photoHeight = '400';\r\n\r\n  \r\n\r\n  let minLat,maxLat,minLon,maxLon = 0\r\n\r\n  if(houseData)\r\n  {\r\n    housePrice = houseData.price\r\n    \r\n    if(houseData.building_size)\r\n    {\r\n      houseSize = houseData.building_size.size\r\n      houseUnits = houseData.building_size.units\r\n    }\r\n    if(houseData.address)\r\n    {\r\n      houseCity = houseData.address.city\r\n      houseState = houseData.address.state\r\n      houseLine = houseData.address.line\r\n      houseZip = houseData.address.postal_code\r\n      houseLat = houseData.address.lat\r\n      houseLon = houseData.address.lon\r\n      houseYear = houseData.year_built\r\n      //setLatLongPoint([parseFloat(houseLat), parseFloat(houseLon)])\r\n\r\n      //console.log(\"lat and long are\", houseLat, houseLon)\r\n      //console.log(\"year built\", houseData.year_built, houseData)\r\n      \r\n      let Rad = 7; // miles\r\n      // Calculate bounding box coordinates with geodetic approximation (WGS84)\r\n      let a = 6378137; // Radius of earth at equator (m)\r\n      let e2 = 0.00669437999014; // eccentricity squared\r\n      let m = 1609.344; // 1 mile in meters\r\n      let r = Math.PI / 180; // convert to radians\r\n      //Distance of 1° latitude (miles)\r\n      let d1 = r * a * (1 - e2) / (1 - e2 * Math.sin(houseLat * r) ^ 2) ^ (3 / 2) / m;\r\n      //Distance of 1° longitude (miles)\r\n      let d2 = r * a * Math.cos(houseLat * r) / Math.sqrt(1 - e2 * Math.sin(houseLat * r) ^ 2) / m;\r\n      minLat = houseLat - Rad / d1;\r\n      maxLat = houseLat + Rad / d1;\r\n      minLon = houseLon - Rad / d2;\r\n      maxLon = houseLon + Rad / d2;\r\n    }\r\n  }\r\n\r\n\r\n  const SubmitPrice = async (evt) => \r\n  {\r\n    if(evt)\r\n    { evt.preventDefault(); }\r\n    //console.log(\"Submitted Price\",priceSub)\r\n    //console.log(\"Actual Price\",housePrice)\r\n    //setPriceDiff(Math.abs(priceSub-housePrice))\r\n    //console.log(\"Difference\",Math.abs(priceSub-housePrice))\r\n\r\n    let searchParams\r\n    if (typeof window !== 'undefined') \r\n    { searchParams = new URLSearchParams(window.location.search); }\r\n\r\n    let stateChosen\r\n    let mlsChosen\r\n    if(searchParams)\r\n    {\r\n      stateChosen = searchParams.get('state')\r\n      mlsChosen = searchParams.get('mls')\r\n    }\r\n    //let pointsEarned = Math.floor( 100*Math.pow(0.999969,(Math.abs(priceSub-housePrice)) ) )\r\n    let percent = (Math.abs(priceSub-housePrice) /housePrice)\r\n    let pointsEarned = Math.round( 500*(1-2*(Math.pow(percent,2)) ))\r\n\r\n    if (pointsEarned < 0)\r\n    {\r\n      setOgGuess(0)\r\n    }\r\n    else\r\n    {\r\n      setOgGuess(pointsEarned)\r\n    }\r\n\r\n    if(readTax == true)\r\n    {\r\n      pointsEarned = (pointsEarned - (500*(0.1)))\r\n    }\r\n\r\n    if(readTrend == true)\r\n    {\r\n      pointsEarned = (pointsEarned - (500*(0.2)))\r\n    }\r\n\r\n    setPercentageScore(percent)\r\n    if (pointsEarned < 0)\r\n    {\r\n      pointsEarned = 0\r\n    }\r\n\r\n    let showScore  = pointsEarned + 1\r\n\r\n    \r\n    setPriceDiff(showScore)  \r\n\r\n    \r\n    // let entry =\r\n    // {\r\n    //  \"state\":`${stateChosen}`, \r\n    //  \"mls\": `${mlsChosen}`,\r\n    //  \"points\": `${pointsEarned}`       \r\n    // }\r\n    let keyName = `${mlsChosen}_${stateChosen}`\r\n\r\n    let entry = { [keyName]:`${pointsEarned}` }\r\n    if(currentUser && currentUser.uid)\r\n    {\r\n      let userID = `${currentUser.uid}`\r\n      let previousData = {}\r\n\r\n      let userStorage = JSON.parse(localStorage.getItem('userData'))\r\n\r\n      if (userStorage == null)\r\n      {\r\n        //console.log(\"RUNNING Users FIREBASE CALL\")\r\n        await firebase.firestore().collection('Users').doc(String(currentUser.uid)).get()\r\n        .then((doc) => {\r\n          if (doc.exists) \r\n          {\r\n              //console.log(\"Document data:\", doc.data());\r\n              //doc.data()\r\n              previousData = doc.data()\r\n              localStorage.setItem('userData', JSON.stringify(doc.data()) )\r\n          } \r\n          else \r\n          {\r\n              // doc.data() will be undefined in this case\r\n              console.log(\"No such user!\");\r\n          }\r\n        }).catch((error) => {\r\n            console.log(\"Error getting user:\", error);\r\n        });\r\n      }\r\n      else \r\n      {\r\n        previousData = userStorage\r\n        //console.log(\"didnt run Submit Price Users firebase read because data is in local storage\", userStorage)\r\n      }\r\n      \r\n\r\n      let addr = `${houseLine}, ${houseCity}, ${houseState}, ${houseZip}`\r\n\r\n      let thumbNail = houseData.photos[0].href\r\n      let trim = thumbNail.substring(0, (thumbNail.length-5))\r\n      let betterThumbNail = trim.concat(\"od-w1024_h768_x2.webp\")\r\n\r\n      previousData[keyName] = [pointsEarned,betterThumbNail]\r\n\r\n      let accuracy = ((1-percent)*100).toFixed(2)\r\n      if (accuracy < 0)\r\n      { accuracy = 0} \r\n      //console.log(\"accuracy is \", accuracy)\r\n\r\n      if(houseData.price > 1000000 && accuracy > 90.0)\r\n      {\r\n        let badgeKey = \"badge:Millionaire.Club\"\r\n        let pointsVar = 0\r\n        let completed \r\n        if(previousData[badgeKey])\r\n        { \r\n          completed = parseInt(previousData[badgeKey][2]) \r\n        }\r\n        if(completed)\r\n        { \r\n          completed += 1 \r\n        }\r\n        else\r\n        { \r\n          completed = 1\r\n        }\r\n        let goal = 10\r\n        let des = \"Score over 90% on houses greater than $1,000,000\"\r\n        let icon = \"MillionairClub.svg\"\r\n        previousData[badgeKey] = [pointsVar,des,completed,goal,icon]\r\n\r\n      }\r\n\r\n      if(houseSize > 3000 && accuracy > 80.0)\r\n      {\r\n        let badgeKey = \"badge:Mansion.Master\"\r\n        let pointsVar = 0\r\n        let completed \r\n        if(previousData[badgeKey])\r\n        { \r\n          completed = parseInt(previousData[badgeKey][2]) \r\n        }\r\n        if(completed)\r\n        { \r\n          completed += 1 \r\n        }\r\n        else\r\n        { \r\n          completed = 1\r\n        }\r\n        let goal = 20\r\n        let des = \"Score over 80% on houses larger than 3000 sqft\"\r\n        let icon = \"Mansion.svg\"\r\n        previousData[badgeKey] = [pointsVar,des,completed,goal,icon]\r\n\r\n      }\r\n      if(houseData.baths > houseData.beds)\r\n      {\r\n        let badgeKey = \"badge:Oval.Office\"\r\n        let pointsVar = 0\r\n        let completed \r\n        if(previousData[badgeKey])\r\n        { \r\n          completed = parseInt(previousData[badgeKey][2]) \r\n        }\r\n        if(completed)\r\n        { \r\n          completed += 1 \r\n        }\r\n        else\r\n        {  \r\n          completed = 1\r\n        }\r\n        let goal = 50\r\n        let des = \"Complete 50 houses that have more bathrooms than bedrooms\"\r\n        let icon = \"OvalOffice.svg\"\r\n        previousData[badgeKey] = [pointsVar,des,completed,goal,icon]\r\n\r\n      }\r\n\r\n      //console.log(\"entry would be\", previousData,\"user is\", userID)\r\n\r\n      //console.log(\"SETTING USERS FIREBASE CALL\")\r\n      firebase.firestore().collection('Users').doc(String(userID)).set(previousData)\r\n      \r\n      localStorage.setItem('userData', JSON.stringify(previousData) )\r\n      //console.log(\"updated userData in localstorage\", localStorage)\r\n    }\r\n\r\n    setPriceComma(\"\")\r\n    \r\n    let num = Math.random() + Math.random() + Math.random()\r\n    setRerender(num)\r\n    //console.log(\"rerender was just called\")\r\n\r\n    setTimeout(() => \r\n    {  \r\n      setModalShow(true)\r\n      if(!currentUser)\r\n      {\r\n        setHideInput(true)\r\n        setTrend({median:'filler'})\r\n      }\r\n    }, 600);\r\n\r\n  }\r\n\r\n  const LoadWithState = async (evt) => \r\n  {\r\n    let searchParams\r\n    if (typeof window !== 'undefined') \r\n    { searchParams = new URLSearchParams(window.location.search); }\r\n\r\n    let stateChosen\r\n    if(searchParams)\r\n    {\r\n      stateChosen = String(searchParams.get('state'))\r\n    }\r\n\r\n    LoadStateHouse(stateChosen,userData)\r\n\r\n    setTimeout(() => \r\n    {  \r\n      let num = Math.random() + Math.random() + Math.random()\r\n      setHideInput(false)\r\n      setRerender(num)\r\n      setReadTax(false)\r\n      setReadTrend(false)\r\n      setTrend({})\r\n      //console.log(\"Called rerender\")\r\n    }, 600);\r\n  \r\n  }\r\n  const LoadWithRandom = async (evt) => \r\n  {\r\n    if(evt)\r\n    { evt.preventDefault(); }\r\n    LoadRandomHouse(userData)\r\n\r\n    setTimeout(() => \r\n    {  \r\n      let num = Math.random() + Math.random() + Math.random()\r\n      setHideInput(false)\r\n      setRerender(num)\r\n      setReadTax(false)\r\n      setReadTrend(false)\r\n      setTrend({})\r\n      //console.log(\"Called rerender\")\r\n    }, 600);\r\n  }\r\n\r\n  function Comma(Num) \r\n  { //function to add commas to textboxes\r\n    if (Num == null)\r\n    {\r\n      Num = ''\r\n    }\r\n    Num += '';\r\n    Num = Num.replace(',', ''); Num = Num.replace(',', ''); Num = Num.replace(',', '');\r\n    Num = Num.replace(',', ''); Num = Num.replace(',', ''); Num = Num.replace(',', '');\r\n    let x = Num.split('.');\r\n    let x1 = x[0];\r\n    let x2 = x.length > 1 ? '.' + x[1] : '';\r\n    let rgx = /(\\d+)(\\d{3})/;\r\n    while (rgx.test(x1))\r\n        x1 = x1.replace(rgx, '$1' + ',' + '$2');\r\n    return x1 + x2;\r\n  }\r\n\r\n  function MyVerticallyCenteredModal(props) \r\n  {\r\n    let searchParams\r\n    if (typeof window !== 'undefined') \r\n    { searchParams = new URLSearchParams(window.location.search); }\r\n\r\n    let stateChosen\r\n    let mlsChosen\r\n    if(searchParams)\r\n    {\r\n      stateChosen = searchParams.get('state')\r\n      mlsChosen = searchParams.get('mls')\r\n    }\r\n\r\n    let accuracy = ((1-percentageScore)*100).toFixed(2)\r\n    if (accuracy < 0)\r\n    { accuracy = 0} \r\n    return (\r\n      \r\n      <Modal\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        className = \"my-modal\"\r\n      >\r\n        <Modal.Header style = {{backgroundColor: `${dark ? '#222' : 'white'}`,color: `${dark ? 'white' : 'black'}`}}>\r\n          <Modal.Title  id=\"contained-modal-title-vcenter\">\r\n            You guessed <span style={{color:\"#00DD00\",fontWeight:\"800\"}}>${Comma(String(priceSub).replace(/\\D/g,''))}</span>! \r\n            The actual list price is <span style={{color:\"#00DD00\",fontWeight:\"800\"}}>${Comma(String(housePrice).replace(/\\D/g,''))}</span>!\r\n          </Modal.Title>\r\n          <CloseButton onClick={props.onHide} variant = {`${dark ? 'white' : ''}`} />\r\n        </Modal.Header>\r\n        <Modal.Body style = {{backgroundColor: `${dark ? '#222' : 'white'}`,color: `${dark ? 'white' : 'black'}`}}>\r\n\r\n          <h4>You scored {priceDiff - 1} (Max score 500).</h4>\r\n          <p>\r\n\r\n            \r\n            {( () =>\r\n              {\r\n                \r\n                let acc = ( () => { return (<> You were <span style={{color:\"#00DD00\",fontWeight:\"700\"}}>{accuracy}%</span> accurate.<br/></>) } )()\r\n                let sec, taxRead, trendRead, original \r\n\r\n                let pBar = ( () => { return ( <ProgressBar style={{backgroundColor:'#00dd00 !important', width:'80%'}} now={accuracy} label={`${accuracy}%`} /> ) } )()\r\n                /*let pBar = ( () => \r\n                { return ( \r\n                  <RangeSlider\r\n                    value={scoreSlider}\r\n                    onChange={changeEvent => setScoreSlider(changeEvent.target.value)}\r\n                  />\r\n                ) } )()\r\n                */\r\n                if ((ogGuess) <= 0)\r\n                { \r\n                  //console.log(\"IN HERE\")\r\n                  sec = ( () => { return (<><br/> You need to be within <span style={{color:\"#00DD00\",fontWeight:\"700\"}}>30%</span> accuracy to score points. <br/></>) } )()\r\n                  \r\n                }\r\n                \r\n                if (readTax)\r\n                {\r\n                  original = ( () => { return (<><br/> Original score was {ogGuess}: </>) } )()\r\n                  taxRead = ( () => { return (<><br/>-50 from the total score for using the Tax Assessed Value.</>) } )()\r\n                }\r\n                if (readTrend)\r\n                {\r\n                  original = ( () => { return (<><br/> Original score was {ogGuess}: </>) } )()\r\n                  trendRead = ( () => { return (<><br/>-100 from the total score for using Average Home Price.</>) } )()\r\n                }\r\n                let askLogIn\r\n                if (!currentUser)\r\n                {\r\n                  askLogIn = ( () =>\r\n                  {\r\n                    return(\r\n                      <>\r\n                        <h4>Make an <Link to=\"/Signup\" style={{ fontWeight:\"700\"}}>account</Link> to track your score!</h4>\r\n                      </>\r\n                    )\r\n                  })()\r\n                }\r\n                return (<> {askLogIn} <br/> {pBar} {acc} {sec} {original} {taxRead} {trendRead} </>)\r\n\r\n              }\r\n            )()}\r\n             <br/><br/>\r\n            <Link to=\"/About\" style={{ fontSize:\"1rem\",fontWeight:\"800\"}}>(Learn more about how the score is calculated)</Link>\r\n          </p>\r\n        </Modal.Body>\r\n        <Modal.Footer style = {{backgroundColor: `${dark ? '#222' : 'white'}`,color: `${dark ? 'white' : 'black'}`}}>\r\n          {/*\r\n          <Button onClick={LoadWithRandom}>New Random Home?</Button>\r\n          <Button onClick={LoadWithState}>New {houseState} Home?</Button> \r\n          */}\r\n          <Button variant=\"danger\" onClick={props.onHide}>Close</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  function NewScoreModal(props) \r\n  {\r\n    let searchParams\r\n    if (typeof window !== 'undefined') \r\n    { searchParams = new URLSearchParams(window.location.search); }\r\n\r\n    let stateChosen\r\n    let mlsChosen\r\n    if(searchParams)\r\n    {\r\n      stateChosen = searchParams.get('state')\r\n      mlsChosen = searchParams.get('mls')\r\n    }\r\n\r\n    let accuracy = ((1-percentageScore)*100).toFixed(2)\r\n    if (accuracy < 0)\r\n    { accuracy = 0} \r\n    return (\r\n      \r\n      <Modal\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        className = \"my-modal\"\r\n      >\r\n        <Modal.Header style = {{backgroundColor: `${dark ? '#222' : 'white'}`,color: `${dark ? 'white' : 'black'}`}}>\r\n          <Modal.Title  id=\"contained-modal-title-vcenter\">\r\n            You scored <span style={{color:\"#00DD00\",fontWeight:\"800\"}}>{priceDiff - 1}</span> points (Max score 500).\r\n          </Modal.Title>\r\n          <CloseButton onClick={props.onHide} variant = {`${dark ? 'white' : ''}`} />\r\n        </Modal.Header>\r\n        <Modal.Body style = {{backgroundColor: `${dark ? '#222' : 'white'}`,color: `${dark ? 'white' : 'black'}`}}>\r\n\r\n          <p>\r\n\r\n            \r\n            {( () =>\r\n              {\r\n                \r\n                let sec, taxRead, trendRead, original \r\n\r\n                let labelText = ( () => { return (<>Actual list price is <span style={{color:\"#00DD00\",fontWeight:\"800\"}}>${Comma(String(housePrice).replace(/\\D/g,''))}</span></>) } )()\r\n\r\n                let pBar = ( () => { return (\r\n                <>\r\n                  <Table striped bordered hover variant={`${dark ? 'dark' : ''}`} style={{ width:'100%'}}>\r\n                    <thead>\r\n                      <tr>\r\n                        <th>Your Guess</th>\r\n                        <th>List Price</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      <tr>\r\n                        <td>\r\n                          <span style={{color:\"#00DD00\",fontWeight:\"800\"}}>${Comma(String(priceSub).replace(/\\D/g,''))}</span>\r\n                        </td>\r\n                        <td className=\"blurPrice\">\r\n                          <span style={{color:\"#00DD00\",fontWeight:\"800\"}}>${Comma(String(housePrice).replace(/\\D/g,''))}</span>\r\n                        </td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </Table>\r\n                  \r\n                  You were <span style={{color:\"#00DD00\",fontWeight:\"800\"}}>{accuracy}%</span> accurate.\r\n                  <ProgressBar style={{backgroundColor:'#00dd00 !important', width:'100%',fontSize:'15px',height:'20px'}} now={accuracy} /> \r\n                  \r\n                </> \r\n                ) } )()\r\n                /*let pBar = ( () => \r\n                { return ( \r\n                  <RangeSlider\r\n                    value={scoreSlider}\r\n                    onChange={changeEvent => setScoreSlider(changeEvent.target.value)}\r\n                  />\r\n                ) } )()\r\n                */\r\n                if ((ogGuess) <= 0)\r\n                { \r\n                  //console.log(\"IN HERE\")\r\n                  sec = ( () => { return (<><br/> You need to be within <span style={{color:\"#00DD00\",fontWeight:\"700\"}}>30%</span> accuracy to score points. <br/></>) } )()\r\n                  \r\n                }\r\n                else\r\n                {\r\n                  if (readTax)\r\n                  {\r\n                    original = ( () => { return (<><br/>Base score: <span style={{fontWeight:\"900\"}}>{ogGuess}</span></>) } )()\r\n                    taxRead = ( () => { return (<><br/><span style={{color:\"#DD2222\",fontWeight:\"900\"}}>-50</span> for using Tax Assessed Value.</>) } )()\r\n                  }\r\n                  if (readTrend)\r\n                  {\r\n                    original = ( () => { return (<><br/>Base score: <span style={{fontWeight:\"900\"}}>{ogGuess}</span></>) } )()\r\n                    trendRead = ( () => { return (<><br/><span style={{color:\"#DD2222\",fontWeight:\"900\"}}>-100</span> for using Average Home Price.</>) } )()\r\n                  }\r\n                }\r\n                let askLogIn\r\n                if (!currentUser)\r\n                {\r\n                  askLogIn = ( () =>\r\n                  {\r\n                    return(\r\n                      <>\r\n                        &#9702;&nbsp;<Link to=\"/Signup\" style={{ color:\"#00DD00\",fontSize:\"1.1rem\",fontWeight:\"800\"}}>Make an account</Link> to track your score!\r\n                      </>\r\n                    )\r\n                  })()\r\n                }\r\n                let learnMore = ( () => { return (\r\n                <><br/><Link to=\"/About\" style={{ color:\"#00DD00\",fontSize:\"1.1rem\",fontWeight:\"800\"}}>Learn more</Link> about how the score is calculated </>) } )()\r\n\r\n                return (\r\n                <> \r\n                  {pBar} {sec} {original}{taxRead} {trendRead} <br/> \r\n                  <div style={{textAlign:'left'}}>\r\n                    {learnMore} {askLogIn}  \r\n                  </div>    \r\n                </>)\r\n\r\n              }\r\n            )()}\r\n          </p>\r\n        </Modal.Body>\r\n        <Modal.Footer style = {{backgroundColor: `${dark ? '#222' : 'white'}`,color: `${dark ? 'white' : 'black'}`}}>\r\n          <div className=\"scoreBottomButton-grid\">  \r\n            <div className=\"scoreBottomButtonBoxes\">\r\n              <Button style={{fontWeight:\"800\",height: 'inherit', textShadow: \"#000 0px 0 5px,#000 0px 0 5px,#000 0px 0 5px\"}} \r\n              onClick = { () => \r\n              {\r\n                LoadWithRandom() \r\n                props.onHide()\r\n              } }>\r\n                New Random Home\r\n              </Button>\r\n            </div>\r\n            <div className=\"scoreBottomButtonBoxes\">\r\n              <Button style={{fontWeight:\"800\",height: 'inherit', textShadow: \"#000 0px 0 5px,#000 0px 0 5px,#000 0px 0 5px\"}}\r\n              onClick = { () => \r\n              {\r\n                LoadWithState() \r\n                props.onHide()\r\n              } }>\r\n                New {houseState} Home\r\n              </Button>\r\n            </div>\r\n            <div className=\"scoreBottomButtonBoxes\">\r\n              <Button style={{height: 'inherit'}} variant=\"danger\" onClick={props.onHide}>Close</Button>\r\n            </div>\r\n          </div>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  function TaxModal(props) \r\n  {\r\n    return (\r\n      \r\n      <Modal\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        className = \"my-modal\"\r\n      >\r\n        <Modal.Header style = {{backgroundColor: `${dark ? '#222' : 'white'}`,color: `${dark ? 'white' : 'black'}`}}>\r\n          <Modal.Title  id=\"contained-modal-title-vcenter\">\r\n            Tax Assessed Value\r\n          </Modal.Title>\r\n          <CloseButton onClick={props.onHide} variant = {`${dark ? 'white' : ''}`} />\r\n        </Modal.Header>\r\n        <Modal.Body style = {{backgroundColor: `${dark ? '#222' : 'white'}`,color: `${dark ? 'white' : 'black'}`}}>\r\n          <p>\r\n            The tax assessed value takes into account the property condition, square footage, and sales of similar homes.\r\n            The actual sale price can be much greater or lower than the tax assesed value.\r\n          </p>\r\n          <p className=\"thicc\">\r\n            Unlocking the tax assessed value will lower your score by 50.\r\n          </p>\r\n          <br/>\r\n          <Button onClick={()=>{\r\n            setReadTax(true) \r\n            setTaxModalShow(false)\r\n          }} style={{ fontSize:\"1.5rem\",fontWeight:\"500\",color:\"white\"}} variant=\"primary\">\r\n            Show Taxes?\r\n          </Button>\r\n        \r\n        </Modal.Body>\r\n        <Modal.Footer style = {{backgroundColor: `${dark ? '#222' : 'white'}`,color: `${dark ? 'white' : 'black'}`}}>\r\n          <Button variant=\"danger\" onClick={props.onHide}>Close</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n  \r\n  function TrendModal(props) \r\n  {\r\n    return (\r\n      \r\n      <Modal\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        className = \"my-modal\"\r\n      >\r\n        <Modal.Header style = {{backgroundColor: `${dark ? '#222' : 'white'}`,color: `${dark ? 'white' : 'black'}`}}>\r\n          <Modal.Title  id=\"contained-modal-title-vcenter\">\r\n            Average House Price\r\n          </Modal.Title>\r\n          <CloseButton onClick={props.onHide} variant = {`${dark ? 'white' : ''}`} />\r\n        </Modal.Header>\r\n        <Modal.Body style = {{backgroundColor: `${dark ? '#222' : 'white'}`,color: `${dark ? 'white' : 'black'}`}}>\r\n          { (() => {\r\n            //console.log(\"trend\",trend)\r\n\r\n\r\n            function toTitleCase(str) \r\n            {\r\n              return str.replace(\r\n                /\\w\\S*/g,\r\n                function(txt) \r\n                {\r\n                  return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\r\n                }\r\n              );\r\n            }\r\n\r\n            function modString(str)\r\n            {\r\n              if( str == 'home')\r\n              {\r\n                str = 'Average Property'\r\n              }\r\n              str = str.replace(/_/g, ' ');\r\n              return toTitleCase(str)\r\n            }\r\n\r\n            if( readTrend )\r\n            {\r\n              return(\r\n                <>\r\n                  <Table striped bordered hover variant={`${dark ? 'dark' : ''}`} style={{ width:'100%', margin:'auto'}}>\r\n                    <tbody>\r\n                      \r\n                        {\r\n                          Object.entries(trend).map((item,ind) =>\r\n                          {\r\n                            //console.log(\"prop\",item[1])\r\n                            if(item[1] && item[1].listing_price)\r\n                            {\r\n                              //console.log(\"int here\")\r\n                              return (\r\n                              <>  \r\n                              <tr>\r\n                                <td style={{color:\"#00DD00\",fontWeight:\"800\"}}>\r\n                                  ${Comma(String(item[1].listing_price).replace(/\\D/g,''))}\r\n                                </td>\r\n                                <td key={`trend-${ind}`} >\r\n                                  {modString(item[0])}\r\n                                </td>\r\n                              </tr>\r\n                              </>\r\n                              )\r\n                            }\r\n                          })\r\n                        }\r\n                    </tbody>\r\n                  </Table>\r\n                  \r\n                </>\r\n              )\r\n            }\r\n            else\r\n            {\r\n              return(\r\n                <>\r\n                  <p className=\"thicc\">\r\n                    This will show the average house price in the area by house type.  <br/>             \r\n                  </p>\r\n                  <p className=\"thicc\">\r\n                    Unlocking this will lower your Final Score by 100.\r\n                  </p>\r\n                  <br/>\r\n                  <Button onClick={ ()=>\r\n                  {\r\n                    setReadTrend(true) \r\n                    //setTrendModalShow(false)\r\n                  }} \r\n                  style={{ fontSize:\"1.5rem\",fontWeight:\"500\",color:\"white\"}} variant=\"primary\">\r\n\r\n                    Show Average Price\r\n\r\n                  </Button>\r\n                </>\r\n              )\r\n            }\r\n          })()\r\n          }\r\n        \r\n        </Modal.Body>\r\n        <Modal.Footer style = {{backgroundColor: `${dark ? '#222' : 'white'}`,color: `${dark ? 'white' : 'black'}`}}>\r\n          <Button variant=\"danger\" onClick={props.onHide}>Close</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n\r\n  const BigMap = useCallback(({ center, zoom }) => {\r\n    const [map, setmap] = useState(null);\r\n    if (map) {\r\n      map.flyTo(center);\r\n    }\r\n    //console.log(\"center is\",center,\"zoom is\",zoom)\r\n    return (\r\n      <>\r\n        <MapContainer style={{width:'100%',height:'350px'}}\r\n          center={center}\r\n          zoom={zoom}\r\n          attributionControl={false}\r\n          zoomControl={false}\r\n          whenCreated={setmap}\r\n          scrollWheelZoom={true}\r\n        >\r\n          <TileLayer\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          ></TileLayer>\r\n          <Circle center={center} pathOptions={{color: '#00DD00'}} radius={400}></Circle>\r\n          {/*\r\n            <Marker position={center}>\r\n            </Marker>\r\n          */}\r\n        </MapContainer>\r\n      </>\r\n    );\r\n  }, [houseData])\r\n\r\n  const SmallMap = useCallback(({ center, zoom }) => {\r\n    const [map, setmap] = useState(null);\r\n\r\n    useEffect(() => {\r\n      if (map) {\r\n        map.flyTo(center);\r\n      }\r\n    }, [])\r\n    //console.log(\"center is\",center,\"zoom is\",zoom)\r\n    return (\r\n      <>\r\n        <MapContainer style={{width:'100%',height:'150px'}}\r\n          center={center}\r\n          zoom={zoom}\r\n          attributionControl={false}\r\n          zoomControl={false}\r\n          whenCreated={setmap}\r\n          scrollWheelZoom={true}\r\n        >\r\n          <TileLayer\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          ></TileLayer>\r\n          <Circle center={center} pathOptions={{color: '#00DD00'}} radius={400}></Circle>\r\n          {/*\r\n            <Marker position={center}>\r\n            </Marker>\r\n          */}\r\n        </MapContainer>\r\n      </>\r\n    );\r\n  }, [houseData])\r\n\r\n  function MapModal(props) \r\n  {\r\n    return (\r\n      \r\n      <Modal\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        className = \"my-modal\"\r\n      >\r\n        <Modal.Header style = {{backgroundColor: `${dark ? '#222' : 'white'}`,color: `${dark ? 'white' : 'black'}`}}>\r\n          <Modal.Title  id=\"contained-modal-title-vcenter\">\r\n            Full Map\r\n          </Modal.Title>\r\n          <CloseButton onClick={props.onHide} variant = {`${dark ? 'white' : ''}`} />\r\n        </Modal.Header>\r\n        <Modal.Body style = {{backgroundColor: `${dark ? '#222' : 'white'}`,color: `${dark ? 'white' : 'black'}`}}>\r\n          \r\n          <BigMap center={[parseFloat(houseData.address.lat),parseFloat(houseData.address.lon)]} zoom={13}/>\r\n        \r\n        </Modal.Body>\r\n        <Modal.Footer style = {{backgroundColor: `${dark ? '#222' : 'white'}`,color: `${dark ? 'white' : 'black'}`}}>\r\n          <Button variant=\"danger\" onClick={props.onHide}>Close</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <PageLayout>\r\n       <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\"\r\n   integrity=\"sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A==\"\r\n   crossorigin=\"\"/>\r\n      <SEO title=\"Play Page\" />\r\n\r\n      {(() => \r\n        {\r\n          if(listItems)\r\n          {\r\n            return(\r\n            <>\r\n              \r\n              \r\n              <div className=\"pageMargin pt-6 mt-6 text-color\">  \r\n                <div className=\"text-left\">Continue {listName}: </div>   \r\n                <div className=\"text-left thicc play-grid scrolling\">\r\n                {\r\n                  \r\n                  Object.entries(listItems).map((f,index) =>\r\n                  {\r\n                    //console.log(\"EEEEEE\")\r\n                    let played = false\r\n                    let points = 0\r\n                    let address = f[1]\r\n\r\n                    let mlsParam, stateParam\r\n                    let params = String(f[0])\r\n                    if (params.length > 0)\r\n                    {\r\n                      let divider = params.search(\"_\")\r\n                      mlsParam = params.substring(0,divider)\r\n                      stateParam = params.substring((divider+1))\r\n                    }\r\n                    Object.entries(userData).map((t,k) =>\r\n                    {\r\n                      if(t[0] == f[0])\r\n                      {\r\n                        played = true\r\n                        points = t[1][0]\r\n                      }\r\n                    })\r\n                        \r\n                    //console.log(\"list entry\",f)\r\n                    let searchParams\r\n                    if (typeof window !== 'undefined') \r\n                    { searchParams = new URLSearchParams(window.location.search); }\r\n\r\n                    let listIDHash\r\n                    if(searchParams)\r\n                    { listIDHash = searchParams.get('listID') }\r\n\r\n                    let imgWidth = \"150px\" \r\n                    let imgHeight =\"100px\" \r\n                    if(played)\r\n                    {\r\n                      return(\r\n                        <>\r\n                        <div key={`listedItems-${index}`} className=\"playBox\">\r\n                          <div className=\"imgContainer\">\r\n                            <a href={`/play?state=${stateParam}&mls=${mlsParam}&listID=${listIDHash}` } style={{color:\"#00DD00\"}} onClick={()=>{\r\n                              setmlsID(mlsParam)\r\n                              setReadTax(false)\r\n                              setReadTrend(false)\r\n                              setTrend({median:\"filler\"})\r\n                              setHideInput(false)\r\n                              }}>\r\n                              <img src={address} className=\"imgGray\" alt=\"house\" style={{maxWidth:`${imgWidth}`, maxHeight:`${imgHeight}` , border:\"5px solid #00DD00\",borderRadius: \"10px\",margin:\"5px\"}}></img> \r\n                              <div className=\"imgCentered\" style={{backgroundColor:\"transparent\", fontWeight:\"900\", fontSize:\"1.5rem\",textShadow: \"#000 0px 0 5px,#000 0px 0 5px,#000 0px 0 5px\"}}>\r\n                                Scored {points}\r\n                              </div>\r\n                            </a>\r\n                          </div>\r\n                        </div>\r\n                        </>\r\n                      )\r\n                    }\r\n                    else \r\n                    {\r\n                      \r\n                      if (mlsParam!=\"\" && stateParam!=\"\")\r\n                      {\r\n                        return(\r\n                          <>\r\n                          <div className=\"playBox\">\r\n                            <div key={`listedItems-${index}`} className=\"imgContainer \">\r\n                              <a href={`/play?state=${stateParam}&mls=${mlsParam}&listID=${listIDHash}`} onClick={()=>{\r\n                                setmlsID(mlsParam)\r\n                                setReadTax(false)\r\n                                setReadTrend(false)\r\n                                setTrend({median:\"filler\"})\r\n                                setHideInput(false)\r\n                                }}>\r\n                                <img src={address} alt=\"house\" style={{maxWidth:`${imgWidth}`, maxHeight:`${imgHeight}` , border:\"5px solid #007bff\",borderRadius: \"10px\",margin:\"5px\"}} ></img> \r\n                              </a>\r\n                            </div>\r\n                          </div>\r\n                          </>\r\n                        )\r\n                      }\r\n                    }\r\n                  })\r\n                }\r\n                </div>\r\n              </div>\r\n\r\n              <br/>\r\n\r\n            </>\r\n            )\r\n          }\r\n        }\r\n        )()\r\n      }\r\n\r\n      {(()=>\r\n        {\r\n          if (listItems == null)\r\n          {\r\n            return( \r\n            <>\r\n              <table style={{margin:'auto'}}>\r\n                <tr>\r\n                  <td>\r\n                    <Button style={{fontWeight:\"900\", width:\"100%\", textShadow: \"#000 0px 0 5px,#000 0px 0 5px,#000 0px 0 5px\"}} \r\n                    onClick={LoadWithRandom}>\r\n                      New Random Home\r\n                    </Button> \r\n                  </td>\r\n                  <td>&nbsp;</td>\r\n                  <td>\r\n                    <Button style={{fontWeight:\"900\",width:\"100%\",textShadow: \"#000 0px 0 5px,#000 0px 0 5px,#000 0px 0 5px\"}}\r\n                    onClick={LoadWithState}>\r\n                      New {houseState} Home\r\n                    </Button> \r\n                  </td>\r\n                </tr>\r\n              </table>\r\n              <br/><br/>\r\n            </>)\r\n          }\r\n        }\r\n        )()\r\n      }\r\n      \r\n      <div>\r\n          \r\n        {(()=>\r\n          {\r\n            if (alreadyPlayed == false && trend.median != \"filler\") // if user has not played house\r\n            {\r\n              if (trend.median == \"none\") // if no trend data\r\n              {\r\n                return( \r\n                <h3> \r\n                  Guess the price! \r\n                </h3>  )\r\n              }\r\n              else\r\n              {\r\n                return( \r\n                  <h3> \r\n                    Guess the price! &nbsp; \r\n                    <Button onClick={()=>{setTrendModalShow(true)}} style={{fontWeight:\"700\",textShadow: \"#000 0px 0 5px,#000 0px 0 5px,#000 0px 0 5px\"}} variant=\"primary\"> \r\n                      Hint? \r\n                    </Button> \r\n                  </h3>  )\r\n              }\r\n            }\r\n            else if (alreadyPlayed == false && trend.median == \"filler\") //if user is not logged in and just submitted a price\r\n            {\r\n              return( \r\n              <>\r\n                <h3> You Scored {priceDiff - 1}!!!</h3> \r\n              </>)\r\n            }\r\n            else //if user is logged in and has a previously submitted price (aka alreadyPlayed = true)\r\n            {\r\n              return( \r\n              <>\r\n                <h3> You Scored {previousScore}!!!</h3> \r\n              </>)\r\n            }\r\n          }\r\n          )()\r\n        }\r\n      </div>\r\n\r\n      <br/>\r\n\r\n        {(()=>\r\n          {\r\n            const parceInp = useCallback((e) =>\r\n            {\r\n              let val = e.target.value\r\n              val = String(val).replace(/\\D/g,'');\r\n              let ret = Comma(val)\r\n              setPriceComma(ret)\r\n              let valClean = String(val).replace(',','')\r\n              setPriceSub(valClean) \r\n            },[setPriceComma])\r\n\r\n            if (alreadyPlayed == false && hideInput == false)\r\n            {\r\n              return(\r\n              <div className=\"inputPrice\">\r\n                <InputGroup >\r\n                  <InputGroup.Text style={{backgroundColor:\"#00BB00\",borderColor:\"#00BB00\",color:\"white\", fontSize:\"1.5rem\",fontWeight:\"900\"}}>$</InputGroup.Text>\r\n                  <FormControl size=\"lg\" variant=\"success\" type=\"text\" value={priceComma} onChange={(e) => {parceInp(e)}} \r\n                    onKeyPress = { (e) =>\r\n                    {\r\n                      //console.log(e.key)\r\n                      if(e.key === 'Enter')\r\n                      {\r\n                        SubmitPrice()\r\n                      }\r\n                    }} placeholder=\"Input a price\" />\r\n                  <Button onClick={SubmitPrice} style={{ fontSize:\"1.5rem\",fontWeight:\"500\", backgroundColor:\"#00BB00\",borderColor:\"#00BB00\"}} variant=\"success\" value=\"Submit\">Submit</Button>\r\n                </InputGroup>\r\n              </div>\r\n              )\r\n            }\r\n            else if (alreadyPlayed == false && hideInput == true)\r\n            {\r\n              return( \r\n              <>\r\n                <h3> The house price is <span className=\"blurPrice\"> ${Comma(String(housePrice).replace(/\\D/g,''))}</span> </h3> \r\n                <h4><Link to=\"/Signup\" style={{ color:\"#00DD00\",fontWeight:\"800\"}}>Make an account</Link> to track your score!</h4>\r\n              </>)\r\n            }\r\n            else \r\n            {\r\n              return( <h3> The house price is ${Comma(String(housePrice).replace(/\\D/g,''))}</h3> )\r\n            }\r\n          }\r\n          )()\r\n        }\r\n\r\n      <br/>\r\n      \r\n      <div className=\"pageMargin pt-6 mt-6 text-color\">\r\n        <div className=\"basic-grid\">\r\n          \r\n          <div className=\"boxes pics-grid \">\r\n            \r\n            {priceDiff ?  <NewScoreModal\r\n                            show={modalShow}\r\n                            onHide={() => setModalShow(false)}\r\n                          /> : ` `}\r\n\r\n            \r\n            {taxModalShow ?  <TaxModal\r\n                            show={taxModalShow}\r\n                            onHide={() => setTaxModalShow(false)}\r\n                          /> : ` `}\r\n            \r\n            {trendModalShow ?  <TrendModal\r\n                            show={trendModalShow}\r\n                            onHide={() => setTrendModalShow(false)}\r\n                          /> : ` `}\r\n\r\n            {mapModalShow ?  <MapModal\r\n                            show={mapModalShow}\r\n                            onHide={() => setMapModalShow(false)}\r\n                          /> : ` `}\r\n\r\n            <div className=\"picSize\">\r\n              <Carousel images={pics} transitionDurationMax={40} style={{ height: 400, backgroundColor:'transparent' }} hasMediaButton={false} hasIndexBoard={false} />\r\n            </div>\r\n            \r\n          </div>\r\n          <div className=\"boxes text-left thicc \" >\r\n            <hr style={{ borderTop:`1px solid ${dark ? 'white' : 'black'}`}}/>\r\n              \r\n            <div className=\"addrMap-grid\">\r\n              <div className=\"addrMapBoxes\">\r\n                {(() => \r\n                  {\r\n                    if (alreadyPlayed == false && hideInput == false)\r\n                    {\r\n                      return(\r\n                        <>\r\n                          {houseCity}, {houseState}, {houseZip} <br/>\r\n                        </>\r\n                      )\r\n                    }\r\n                    else\r\n                    {\r\n                      return( \r\n                        <>\r\n                          {houseLine}, {houseCity}, {houseState}, {houseZip} <br/>\r\n                        </>\r\n                        )\r\n                    }\r\n                  }\r\n                  )()\r\n                }\r\n\r\n                {(() => \r\n                  {\r\n                    if(houseYear)\r\n                    {\r\n                      return(\r\n                        <> {houseYear} <div className=\"thin\">Year Built</div> <br/> </>\r\n                      )\r\n                    }\r\n                  })()\r\n                } \r\n\r\n                {houseData.beds} <div className=\"thin\">Beds</div> {houseData.baths} <div className=\"thin\">Baths</div>&nbsp; \r\n                {houseSize} <div className=\"thin\">{houseUnits}</div> {houseData.style} <br/>\r\n\r\n                \r\n              </div>\r\n              <div className=\"addrMapBoxes\">\r\n                {(() => \r\n                  {\r\n                    if(houseData && houseData.address)\r\n                    {\r\n                      return(\r\n                        <div style={{position:'relative'}}>\r\n                          <SmallMap center={[parseFloat(houseData.address.lat),parseFloat(houseData.address.lon)]} zoom={12}/>\r\n                          <button onClick={()=>{setMapModalShow(true)}} style={{opacity:'0.75',backgroundColor:'transparent',border:'none', position:'absolute',bottom:'5px',zIndex:'900'}}> \r\n                            \r\n                            <svg style={{stroke:'#555',fill:'#fff'}} height=\"30\" preserveAspectRatio=\"xMidYMid meet\" role=\"img\" viewBox=\"0 0 30 30\" width=\"30\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                              <title>Full Map</title>\r\n                              <path d=\"m1 1v10h5v-5h5v-5zm18 0v5h5v5h5v-10zm-18 18v10h10v-5h-5v-5zm18 5v5h10v-10h-5v5z\"></path>\r\n                            </svg>\r\n                          </button>\r\n                        </div>\r\n                      )\r\n                    }\r\n                  })()\r\n                }  \r\n              </div>\r\n            </div> \r\n            <hr style={{ borderTop:`1px solid ${dark ? 'white' : 'black'}`}}/>\r\n          </div>\r\n\r\n          \r\n          <div className=\"boxes text-left thicc scrolling\">\r\n            <u>Description:</u><br/>\r\n            <div className=\"thin\">{houseData.description}</div>\r\n            {\r\n            // <iframe width=\"300\" height=\"250\" frameBorder=\"0\" scrolling=\"no\" marginHeight=\"0\" marginWidth=\"0\" \r\n            // src={`https://www.openstreetmap.org/export/embed.html?mlat=${houseLat}&mlon=${houseLon}&bbox=${minLon}%2C${minLat}%2C${maxLon}%2C${maxLat}&amp;layer=mapnik#map=11/${houseLat}/${houseLon}`} \r\n            // style={{border: `1px solid black`}}>\r\n            // </iframe><br/>\r\n            }\r\n          </div>\r\n          <div className=\"boxes text-left features-grid thicc \">\r\n            <Accordion>\r\n              <Accordion.Item eventKey=\"0\" style={{borderColor:'#bbb',borderWidth:'1px'}}>\r\n                <Accordion.Button style={{backgroundColor:`${dark ? '#222' : 'white'}`,color:`${dark ? 'white' : 'black'}`,fontWeight:'900',fontSize:'1.2rem' }}><u>Details:</u></Accordion.Button>\r\n                <Accordion.Body >\r\n                  <div className=\"thin feat-grid\">\r\n                    {(()=>\r\n                      { \r\n                        //console.log(\"tax assesed \",taxAss.length)\r\n                        if (taxAss.length > 0)\r\n                        {\r\n                          if(!readTax)\r\n                          {\r\n                            return(\r\n                              <>\r\n                                <div className=\"featBoxes\">\r\n                                  <div className=\"mid\">Tax Assessed Value </div>\r\n                                  <Button onClick={()=>{setTaxModalShow(true)}} style={{fontWeight:\"700\", fontSize:\"1.5rem\", textShadow: \"#000 0px 0 5px,#000 0px 0 5px,#000 0px 0 5px\"}} \r\n                                  variant=\"primary\">Unlock Tax Hint?</Button>\r\n                                </div>\r\n                              </>\r\n                            )\r\n                          }\r\n                          else\r\n                          {\r\n                            return(\r\n                            <>\r\n                              <div className=\"featBoxes\">\r\n                                <div className=\"mid\">Tax Assessed Value </div>\r\n                                <ul>\r\n                                  { taxAss && taxAss.map((e,ind) => \r\n                                    {\r\n                                      if(e.assessment)\r\n                                      {\r\n                                        return (\r\n                                          <div key={`tax-${ind}`} >\r\n                                            <li>{e.year} - ${e.assessment.total}</li>\r\n                                          </div>\r\n                                        )\r\n                                      }\r\n                                    })\r\n                                  }\r\n                                </ul>\r\n                              </div>\r\n                            </>\r\n                            )\r\n                          }\r\n                        }\r\n                        else\r\n                        {\r\n                          return(\r\n                            <>\r\n                              <div className=\"featBoxes\">\r\n                                <div className=\"mid\">Tax Assessed Value </div>\r\n                                <div style={{fontWeight:\"600\",color:\"red\"}}>There is no Tax data available for this house. </div>\r\n                              </div>\r\n                            </>\r\n                          )\r\n                        }\r\n                      }\r\n                      )()\r\n                    }\r\n                    { \r\n                      feats.map((e,ind) => \r\n                      {\r\n                        return (\r\n                          <div key={`featCat-${ind}`} className=\"featBoxes\" >\r\n                            <div className=\"mid\">{e.category} </div>\r\n                            <ul>\r\n                              {\r\n                                e.text.map((f,index) =>\r\n                                {\r\n                                  return (\r\n                                    <li key={`featList-${index}`}>\r\n                                      {f}\r\n                                    </li>\r\n                                  )\r\n                                })\r\n                              }\r\n                            </ul>\r\n                          </div>\r\n                        )\r\n                      })\r\n                    }\r\n                  </div>\r\n                </Accordion.Body>\r\n              </Accordion.Item>\r\n            </Accordion>    \r\n          </div>  \r\n        </div>\r\n\r\n        \r\n\r\n        {\r\n        // <div style={{ margin: 'auto', width:'100%'}}>\r\n        //   <Carousel \r\n        //     plugins={[\r\n        //       'arrows',\r\n        //       'infinite'\r\n        //     ]}\r\n        //   >\r\n        //     { \r\n        //       pics.map((e,ind) => \r\n        //       {\r\n        //         return ( \r\n        //           <img height={photoHeight}  key={ind} fluid src={e} alt={\"Appraisir\"} />\r\n        //         )\r\n        //       })\r\n        //     } \r\n        //   </Carousel>\r\n        // </div>\r\n        // <br/>\r\n        // <div className=\"text-left\">\r\n        //   <h3 className=\"last-name\" style={{display: `inline-block`}}> {houseData.style} </h3>&nbsp;\r\n        // </div>\r\n        // <div className=\"text-left\">         \r\n        //   <h3 style={{display: `inline-block`}}> <div style={{display: `inline-block`}} className=\"last-name\">{houseData.beds}</div>  Beds</h3> &nbsp;\r\n        //   <h3 style={{display: `inline-block`}}> <div style={{display: `inline-block`}} className=\"last-name\">{houseData.baths}</div> Baths</h3> &nbsp;\r\n        //   <h3 style={{display: `inline-block`}}> \r\n        //     <div style={{display: `inline-block`}} className=\"last-name\">{houseSize}</div> \r\n        //     &nbsp;{houseUnits}\r\n        //   </h3> \r\n        // </div>\r\n        // <div className=\"text-left\">\r\n        //   <h3 style={{display: `inline-block`}}> Year Built: <div style={{display: `inline-block`}} className=\"last-name\">{houseData.year_built} </div> </h3>\r\n        // </div>        \r\n        // <h3 className=\"text-left\"> Description: </h3> \r\n        // <div className=\"text-left last-name\"> {houseData.description} </div>\r\n        }\r\n\r\n        \r\n      </div>\r\n      \r\n    </PageLayout>\r\n  )\r\n\r\n}"],"sourceRoot":""}